package qmx.crw;

import org.junit.Test;

import static cn.hutool.crypto.digest.DigestUtil.sha1Hex;

/**
 * ClassName: Sha1Demo_2
 * Description:
 * date: 2019/10/16 12:08
 *
 * @author crwen
 * @create 2019-10-16-12:08
 * @since JDK 1.8
 */
public class Sha1Demo_2 {
	public static final String str = "3F649F708AAFA7A0A94138DC3022F6EA611E8D01";
	static byte[][] bytes =  {
			{8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8}, {8,8,4,5,8,1,1,1,1,1,1,8,8,8,8,4,8}, {8,2,8,1,8,8,5,1,8,8,8,1,8,1,8,4,8},
			{8,5,8,2,8,8,8,8,1,8,8,4,8,1,1,5,8}, {8,8,8,8,2,4,8,1,1,8,8,1,8,5,1,5,8}, {8,8,8,8,5,8,8,1,5,1,8,8,8,1,8,8,8},
			{8,8,8,1,8,8,8,8,8,8,8,8,1,8,1,5,8}, {8,1,8,8,1,8,8,1,1,4,8,8,8,8,8,1,8}, {8,4,1,8,8,5,1,8,8,8,8,8,4,2,8,8,8},
			{1,1,8,5,8,2,8,5,1,4,8,8,8,1,5,1,8}, {9,1,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8}, {1,1,8,1,8,8,2,1,8,8,5,2,1,8,8,8,8},
			{8,8,8,8,4,8,8,2,1,1,8,2,1,8,1,8,8}, {8,1,1,8,8,4,4,1,8,4,2,4,8,4,8,8,8}, {8,4,8,8,1,2,8,8,8,8,1,8,8,1,8,1,8},
			{8,1,1,5,8,8,8,8,8,8,8,8,1,8,8,8,8}, {8,8,1,1,5,2,8,8,8,8,8,8,8,8,2,8,8}, {8,8,4,8,1,8,2,8,1,5,8,8,4,8,8,8,8},
			{8,8,2,8,1,8,8,1,8,8,1,8,2,2,5,8,8}, {8,2,1,8,8,8,8,2,8,4,5,8,1,1,2,5,8},{8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8}
	};

	@Test
	public void test() {
		byte[][] arr =  {
				{8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8}, {8,8,4,5,8,1,1,1,1,1,1,8,8,8,8,4,8}, {8,2,8,1,8,8,5,1,8,8,8,1,8,1,8,4,8},
				{8,5,8,2,8,8,8,8,1,8,8,4,8,1,1,5,8}, {8,8,8,8,2,4,8,1,1,8,8,1,8,5,1,5,8}, {8,8,8,8,5,8,8,1,5,1,8,8,8,1,8,8,8},
				{8,8,8,1,8,8,8,8,8,8,8,8,1,8,1,5,8}, {8,1,8,8,1,8,8,1,1,4,8,8,8,8,8,1,8}, {8,4,1,8,8,5,1,8,8,8,8,8,4,2,8,8,8},
				{1,1,8,5,8,2,8,5,1,4,8,8,8,1,5,1,8}, {9,1,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8}, {1,1,8,1,8,8,2,1,8,8,5,2,1,8,8,8,8},
				{8,8,8,8,4,8,8,2,1,1,8,2,1,8,1,8,8}, {8,1,1,8,8,4,4,1,8,4,2,4,8,4,8,8,8}, {8,4,8,8,1,2,8,8,8,8,1,8,8,1,8,1,8},
				{8,1,1,5,8,8,8,8,8,8,8,8,1,8,8,8,8}, {8,8,1,1,5,2,8,8,8,8,8,8,8,8,2,8,8}, {8,8,4,8,1,8,2,8,1,5,8,8,4,8,8,8,8},
				{8,8,2,8,1,8,8,1,8,8,1,8,2,2,5,8,8}, {8,2,1,8,8,8,8,2,8,4,5,8,1,1,2,5,8},{8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8}
		};

		dfs(arr, 0);

	}


	public static void dfs(byte[][] arr, int cnt) {
		if (cnt == 3) {
			return ;
		}
		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr[i].length; j++) {
				if (arr[i][j] == 1) {
					arr[i][j] = 8;
					cnt++;
					dfs(arr, cnt);
					String s = getRow(arr);
					if (s.equalsIgnoreCase(str) && cnt == 3) {
						//for (int k = 0; k < arr.length; k++) {
							cmp(arr, bytes);
							//System.out.print(Arrays.toString(arr[k]));
						//}
						//找到就返回
						return ;
					}
					//回溯
					arr[i][j] = 1;
					cnt--;
				}
			}
		}
	}
	public static String getRow(byte[][] arr) {
		String s = "";
		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr[i].length; j++) {
				s += arr[i][j];
			}
		}
		String res = sha1Hex("clearlove9" + s);
		return res;
	}

	public static void  cmp(byte[][] arr, byte[][] a) {
		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr[i].length; j++) {
				if (arr[i][j] != a[i][j]) {
					System.out.println(i + " " + j);
				}
			}
		}
	}

}
